@startuml overview-for-backtest

package TradeClient {
    package BackTestExchange {
        class CSVPriceDataFeeder
        class OnMemoryTradeDataManager {
            notify_order_closed(close_type: CloseType, order: Order)
        }
        class BackTestBroker {
            notify_price_update(price_ref: PriceSequence)
            notify_order_closed(close_type: CloseType, order: Order)
        }
        class AccountManager {
            buying_power: Decimal
            balance: Decimal
            net_worth: Decimal
            realized_pr: Decimal
            unrealized_pr: Decimal
        }
        class OrderManager {
            open_orders: [Order]
            closed_orders: [ClosedOrder]
        }
        class PositionManager {
            positions: {pid: Positions}
        }

        OnMemoryTradeDataManager -down-> AccountManager
        OnMemoryTradeDataManager -down-> OrderManager
        OnMemoryTradeDataManager -down-> PositionManager
        OnMemoryTradeDataManager -> BackTestBroker
        BackTestBroker -> CSVPriceDataFeeder
    }

    package Entity {
        interface PriceSequence {
            open: NDArray
            high: NDArray
            low: NDArray
            close: NDArray
            vol: NDArray
            time: NDArray
        }
    }

    package BackTestClient {
        package Usecase {
            interface Strategy {
                execute()
            }
            class CalcBarTime

        }

        package APIClient {
            AccountMngClient -up-> AccountManager
            OrderMngClient -up-> OrderManager
            PositionMngClient -up-> PositionManager
        }

        package Controller {
            interface PriceDataController {
                register_notify()
                notify(price_ref: PriceSequence)
                unregister_notify()
                writeDB()
            }
            interface PositionDataController {
                register_notify()
                notify(AccountRef)
                unregister_notify()
                writeDB()
            }
            interface OrderHistoryController {
                register_notify()
                notify(AccountRef)
                unregister_notify()
                writeDB()
            }
            interface AccountDataController {
                register_notify()
                notify(AccountRef)
                unregister_notify()
                writeDB()
            }
            interface OrderController {
                notify_new_orders(orders: List[Order])
                notify_price_update(price_ref: PriceSequence)
            }
            class StrategyProcesser {
                add(strategy: Strategy)
                delete(strategy: Strategy)
                notify_price_update(price_ref: PriceSequence)
            }

            package ControllerImpl {
                class BTPriceDataController
                class BTPositionDataController
                class BTOrderHistoryController
                class BTAccountDataController
                class BTOrderController
                BTPriceDataController .down.|> PriceDataController
                BTPositionDataController .down.|> PositionDataController
                BTOrderHistoryController .down.|> OrderHistoryController
                BTAccountDataController .down.|> AccountDataController
                BTOrderController .down.|> OrderController
                BTPriceDataController -up-> CSVPriceDataFeeder
                BTAccountDataController -up-> AccountMngClient
                BTOrderHistoryController -up-> OrderMngClient
                BTPositionDataController -up-> PositionMngClient
                BTOrderController -up-> BackTestBroker

                BTPositionDataController -> CalcBarTime
            }
        }

        package PersistentLayer {
            interface DBConnection
        }

        DBConnection -> PriceDataController
        PriceDataController -down-> StrategyProcesser
        PriceDataController -> PriceSequence
        Strategy -> PriceSequence
        StrategyProcesser -up-> PositionDataController
        StrategyProcesser -up-> OrderHistoryController
        StrategyProcesser -up-> AccountDataController
        StrategyProcesser -up-> OrderController
        StrategyProcesser -down-> Strategy
    }
}



@enduml